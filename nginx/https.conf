# worker_processes 1;

# user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
# error_log  /var/log/nginx/error.log warn;
# pid /var/run/nginx.pid;

events {
#   worker_connections 1024; # increase if you have lots of clients
#   accept_mutex off; # set to 'on' if nginx worker_processes > 1
#   # 'use epoll;' to enable for Linux 2.6+
#   # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
    # include mime.types;
    # fallback in case we can't determine a type
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log combined;
    sendfile on;

    # UNIX SOCKETS
    upstream website_production {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response

        # for UNIX domain socket setups
        server unix:/sockets/website-prod.sock fail_timeout=0;

        # for a TCP configuration
        # server 0.0.0.0:8080 fail_timeout=0;
    }
    upstream website_development {
        # fail_timeout=0 means we always retry an upstream even if it failed
        # to return a good HTTP response

        # for UNIX domain socket setups
        server unix:/sockets/website-dev.sock fail_timeout=5;

        # for a TCP configuration
        # server 0.0.0.0:8080 fail_timeout=0;
    }

    # CLOSE FAILED HTTP
    server {
        # if no Host match, close the connection to prevent host spoofing
        listen 80 default_server;
        return 444;
    }
    # REDIRECT HTTP => HTTPS
    server {
        # Redirect all HTTP requests from trusted domains to HTTPS
        listen 80 deferred;
        client_max_body_size 4G;

        # set the correct host(s) for your site
        server_name modernmak.com www.modernmak.com development.modernmak.com www.development.modernmak.com;

        keepalive_timeout 5;
        return 301 https://$host$request_uri;
    }
    # CLOSE FAILED HTTPS
    server
    {
        listen 443 default_server;
        return 444;
    }

    # PRODUCTION URLS
    server {
        listen 443 ssl;
        ssl_certificate     /etc/letsencrypt/live/modernmak.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/modernmak.com/privkey.pem;
        server_name modernmak.com;

        client_max_body_size 4G;
        keepalive_timeout 5;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            # proxy_buffering off; # https://docs.gunicorn.org/en/stable/deploy.html ~ ctrl-f 'If you want to be able to handle streaming request/responses'
            proxy_pass http://website_production;
        }
    }
    server {
        listen 443 ssl;
        ssl_certificate     /etc/letsencrypt/live/www.modernmak.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.modernmak.com/privkey.pem;
        server_name www.modernmak.com;

        client_max_body_size 4G;
        keepalive_timeout 5;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            # proxy_buffering off; # https://docs.gunicorn.org/en/stable/deploy.html ~ ctrl-f 'If you want to be able to handle streaming request/responses'
            proxy_pass http://website_production;
        }
    }
    # DEVELOPMENT URLS
    server {
        listen 443 ssl;
        ssl_certificate     /etc/letsencrypt/live/www.development.modernmak.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.development.modernmak.com/privkey.pem;
        server_name www.development.modernmak.com;

        client_max_body_size 4G;
        keepalive_timeout 5;


        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            # proxy_buffering off; # https://docs.gunicorn.org/en/stable/deploy.html ~ ctrl-f 'If you want to be able to handle streaming request/responses'
            proxy_pass http://website_development;
        }

        return 307 https://www.modernmak.com$request_uri;
    }
    server {
        listen 443 ssl;
        ssl_certificate     /etc/letsencrypt/live/development.modernmak.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/development.modernmak.com/privkey.pem;
        server_name development.modernmak.com;

        client_max_body_size 4G;
        keepalive_timeout 5;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            # proxy_buffering off; # https://docs.gunicorn.org/en/stable/deploy.html ~ ctrl-f 'If you want to be able to handle streaming request/responses'
            proxy_pass http://website_development;
        }

        return 307 https://modernmak.com$request_uri;
    }
}