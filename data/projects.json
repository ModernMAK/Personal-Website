[
  {
    "id": "relic-sga-tool",
    "name": "Relic SGA Tool",
    "summary": "A content extractor for Relic's SGA file format. Written in python.",
    "repo": "https://github.com/ModernMAK/Relic-SGA-Archive-Tool",
    "thumbnail": "/img/project/Relic-SGA-Tool.png",
    "banner": "/img/project/Relic-SGA-Tool-Banner.png",
    "description": "This project started as a method to extract models from the game Dawn Of War. And began with some google-fu to build a basis for how files are layed out. Using the forums over at Xentax; I got a gist of the Archive folder's layout and the specialized file layout.\n\nWhile this allowed me to read the files; most of the important files were still 'blobby' data dumps. \n\nI began with Audio-Files, researching on forums and the modding scene for information on AIFF-C. As it turned out; the files were compressed using a special codec developed by relic, requiring the use of  two ancient programs to convert back to a wav format.\n\nNext came models; a fine piece of advice I found on forums was looking for the exponent/mantissa of floats; typically XF or FX depending on byte orders. This helps identify the 'position' part of a vertex list. From there, I extrapolated common things I expected to find in a mesh; Uvs & Normals.\n\nWhile not perfect, since the mesh still had unknown fields packed in, and I didn't understand how to parse a skeleton chunk, it was capable of dumping the majority of the object without ripping it from the gpu (which is what is required by ninjaripper).\n\nAfter meshes, I moved onto textures. From memory, I believe most all DOW I textures (packed into texture archives) were dds files marked as tga files. And required rebuilding a proper DDS file header. Later, I ran into a separate texture set that was grayscale/color TGAs which required rebuilding the TGA header.\n\nFrom there I looked into other assets to convert, but decided against it. Since these files were exclusive to the game, and didn't have a good reason to need to extract them.\n\nLater, I learned that this format was still being used by Relic; all the way to their game DOW III. So I tried to continue to extract assets for DOW II and DOW III. Primarily; models. DOW II uses FMOD audio, which I felt would be too much of an undertaking to handle when I'm sure a tool already exists, and DOW III (I think) already unpacked audio lines normally?\n\n\nThe end result is a tool which can unpack .SGA archives, RelicChunky files (as generic binary folder/data files), Models (.WHM, .Model), Textures (.RTX, .WTP, .RTG) and Audio (.FDA / .AIFF-C)\n"
  },
  {
    "id": "tModLoader",
    "name": "tModLoader",
    "summary": "An Open-Source project to allow Terraria to be modded, which I've contributed a few bug fixes to.",
    "repo": "https://github.com/tModLoader/tModLoader/pulls?q=author%3AModernMAK",
    "thumbnail": "/img/project/tModLoader.jpg",
    "description": "I briefly worked on tModLoader to fix a few bugs when Terraria 1.4 released. It was my first exposure to working on a Decompiled C# project. \nBy reviewing crash logs and the ingame code, I was able to discover that a new water texture variant was causing a Crash to Desktop; a simple fix, just incrementing the water texture's array size by one.\nWhile playing with my ingame accessories I noticed that not all accessories were being displayed on the player, by carefully examining the call stack and the player's status. I discovered a logical error in the Draw Code, which would not handle backpacks added by mods. \nBut perhaps my biggest accomplishment for tModLoader was fixing a Net-Code bug. I'll begin by saying that I was only able to debug this because I could debug the server and client separately, and examine the handshakes closely. The issue was that clients tried to load information before being initialized. By carefully combing through callstacks between both the client and the server I was able to familiarize myself with how the handshake is expected to go. Now that I understood what was going on, the fix was simple; check if we are in the proper state to read data from the server. While this problem is obvious; working with Decompiled code is not; this code-base used constants for the state values; meaning I only had numbers (instead of pretty names) to work with.\n"
  },
  {
    "id": "polygon-sphere",
    "name": "Polygon Sphere",
    "summary": "A dynamically generated spherical planet, constructed from a graph. A mathy project that plays with data structures and geometry. Made in Unity3D.",
    "repo": "https://github.com/ModernMAK/DynamicTileSphere",
    "thumbnail": "/img/project/DynamicTileSphere.png",
    "description": "Dynamic Tile Sphere is a simple Unity project that generates a sphere composed of polygons. At its core, this application generates a platonic solid (specified by shape), subdivides the solid to assemble a bigger planet, then creates a 'Dual' of the mesh, turning every source vertex into a polygon, and every source polygon into a vertex. At the time, I didn't find many graphing C# libraries that I could use, so I built a rather mediocre Graph structure; using Half-edges.\n\tThe graph is chucked into an algorithm which generates a mesh from the graph, and a shader then uses a texture array to paint the polygons.\n\tTo avoid the most expensive part of the operation, once a mesh is generated; it is saved to the persistent data path to avoid recomputing the planet. Because only the shape, subdivisions, and whether we use slerp defines the positions on a planet, we only need to handle these changes when saving.\n"
  },
  {
    "id": "univox",
    "name": "Unity Voxels",
    "summary": "A small voxel engine built in Unity, utilizing the job system and the new Native Containers.",
    "repo": "https://github.com/ModernMAK/UniVox",
    "thumbnail": "/img/project/Univox.png",
    "description": "UniVox is a simple Boxel (think minecraft) engine sandbox developed in Unity. Learned about vertex-layouts in order to reduce mesh size in memory. Learned about optimising mesh generation; ala ignoring faces which can't be seen. Like most voxel engines, I rely on chunking voxels into larger spaces, which allows me to stream in chunks as needed. While normally an oct-tree of sorts is used; I use a simple hashmap, since any voxel or chunk can be expressed by an x,y,z integer triple."
  },
  {
    "id": "litespeed",
    "name": "Litespeed",
    "summary": "A bare-bones python webserver which I collaborated on.",
    "repo": "https://github.com/ModernMAK/LiteSpeed",
    "description": "Litespeed is a project run by my friend that's essentially a barebones python web-server. I put it here primarily because it taught me about function decorators; I primarily helped by acting as a tester (because I was using the project). I discovered the application did not support 206 requests (important for streaming content), and lacked a method of gracefully raising an exception to the server that doubled as a status code: useful for logging purposes. Additionally, I standardized the logic of a route's response, which previously failed for cases where it claimed to work; Callables and Tuples being the most pressing concern.\n\tBecause of how the system works internally; all results are expected to be a tuple for content, response code, and headers. But response code and header can be omitted for brevity. This leads to a situation where a tuple could be provided for content, and the handler would get confused.\n\tWhile not the greatest solution; I simply disallow tuples to be returned unless it is a proper response tuple.\n\tFrom there, I flattened handling of the body; to properly handle all cases; and convert to a consistent output; bytes (for strings, stringables (ints), and pre-existing bytes), or JSON (for lists, dicts, and other collection data-types). File serving is handled above this level; and is conveniently already formatted as a proper 200/206 response."
  },
  {
    "id": "file-tag-server",
    "name": "File Tag Server",
    "summary": "A python service I created to tag files on your local system, without needing to organize them by folders.",
    "repo": "https://github.com/ModernMAK/FileTagServer",
    "description": "FileTagServer was an ambitious project to be able to 'tag' files and quickly search them. Allowing them to be grouped  arbitrarily. I used this project to organize a bunch of art and documents relating to project ideas.\n\tThe project taught me about product design, as well as building a REST apis, and displays a barebones knowledge of relational databases in SQL.\nThis project kept changing scope as I discovered how cumbersome my initial user interface was, and made me appreciate good UX design.\n"
  },
  {
    "id": "character-ability-prototype",
    "name": "Character Ability Prototype",
    "summary": "A game prototype which utilizes individual characters with unique abilities. Mimicking other MOBAs like League of Legends or DOTA 2.",
    "repo": "https://github.com/ModernMAK/BoEG",
    "description": "Battle of EndGame (BoEG) was a fun little idea I had in  high school; to build a moba. Despite much difficulty, and a lot of revisions. I learned alot about how to stretch the flexibility of Interfaces. Which I use to allow Units and Abilities to pick and choose what features they support. My interface pattern also allowed me to easily decouple my UI system from game-logic.\nI also support an observer pattern to reduce calls to empty functions and to decouple them. This is primarily the case for my 'ticking' or 'update' system, which for ease of use, implements a 'pre' step in addition to the current and post (late) steps that unity uses. This allows me to update units and abilities independently; which allows me to use abilities without tying them to an entity. (Useful for Game mode effects or abilities which cast other abilities.)\nDespite being a Unity-based project; because of the restrictions of the engine (E.G. my 'Step' System for updates. And Unity's dependence on MonoBehaviour) I relied primarily on interfaces to act as 'Components' for my Game Objects. To avoid long lists of small components on a single object.\n\tI also make use of Scriptable Objects for my abilities, allowing me to edit their values in unity or YAML (unless I'm mistaken, and they are binaries). While automatically handling the necessary serialization & instancing. But Perhaps the most interesting part of this project; abilities and modifiers.\nModifiers are implemented entirely through interfaces. A master Modifiable class which contains a list of all modifiers, and has two events for when a modifier is added/removed. Any module which should accept modifiers then listens to Modifiable. When a modifier is added or removed, they check if it's a relevant modifier and manage their own personal modifier list. This avoids the issue of asking Modifiable for a list of all relevant modifiers (which would need to happen every update for any steppable modules) while also allowing all modifiers to be exposed (for UI purposes or for initializing a new Listener on a pre-existing Modifiable)\nAbilities are also implemented primarily with interfaces; my expectations for abilities were to make it simple to cast via code, and via user input. In the event that I'd like to cast an ability via another ability I'd need a code method, and I'd obviously need a user input method to allow abilities to control how they are cast by the user. With that knowledge, I simply needed abilities to be able to read modules from entities (exposed by interfaces) to get information about the unit, like their team or how much mana they have. And do whatever the ability needed to do on other units.\n"
  },
  {
    "id": "shrouded-aisle",
    "name": "Shrouded AIsle",
    "summary": "A bot that uses TensforFlow to play the game Shrouded Isle. Built in python.",
    "description": "A game I found that was similar to 'Guess Who', you have to keep people happy while searching for the right person. I thought it would be interesting to see if I could write a Tensorflow graph to play the game and guess who the target was.\nMy first goal was to train it to identify the genders of the characters; as the target's pronoun would always be given as HE or SHE. So I wrote a bot that would launch the game, change a graphical setting (the game is monochromatic, and offers different color schemes), visit each house and snap a picture of roughly where their portrait should be, then save this to a folder where I would manually sort them. From there, I let the neural net run, and try to learn the portrait's gender.\n"
  },
  {
    "id": "steam-vr-prototype",
    "name": "SteamVR Prototype",
    "summary": "A simple prototype for SteamVR in Unity. Some simple hand-gun logic and a crude implementation of Half-Life Alyx's gravity gloves.",
    "description": "A small prototype that I played with to learn about SteamVR. While Valve's Unity plugin does much of the heavy lifting, I was able to emulate a bit of Valve's gravity-glove code; their Point and flick interface, which seems to just be a projectile motion. Orienting the object was more difficult, because we need to add an angular velocity so that it orients to the user, but we want to ease into and out of the rotation, meaning it needs to accelerate and decelerate over time. But, if the object collides in mid air, we may want to stop our rotation code; since it may not reach us anymore.\n\tWhile minor, it was also a fun lesson in VR-controller mapping; SteamVR uses its own list of mappings handled by Steam to allow any VR controller to play any VR game. While I have access to an Occulus my friends both use Vives; while we were able to figure it out eventually, it definitely taught me to be aware of how other VR devices handle inputs.\n"
  },
  {
    "id": "arduino-joystick",
    "name": "Arduino Joystick",
    "summary": "A small project to build my own arcade joystick using an Arduino microcontroller. Built in C.",
    "description": "A simple c++ microcontroller project about polling a circuit and sending a HID report. While the coding aspect is quite basic; it was a good lesson in learning about ARM firmware (I had to flash new firmware to use the arduino as a HID usb device) and serialization (my first attempts were a client-slave program using arudino's USB serial."
  },
  {
    "id": "website",
    "name": "ModernMAK.com",
    "summary": "The website you're viewing; built with FastAPI, uvicorn, Pystache, and Bootstrap.",
    "description": "I needed a way to present my stuff that's slightly nicer than shouting 'I've dabbled in programming for 5+ years, just check my GitHub!' This simple site is the culmination of that."
  }
]